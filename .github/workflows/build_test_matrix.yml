name: Build & Test Matrix

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        config:
        - {os: ubuntu-latest, name: Linux}
        - {os: macos-latest, name: MacOS}

    runs-on: ${{ matrix.config.os }}
    name: Build & Test - ${{ matrix.config.name }} 
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Platform Setup
      run: |
        if [[ "${{ matrix.config.os }}" == "macos-latest" ]]; then
          brew install --cask docker
          brew install docker-compose
          # Link the Docker Compose v2 plugin so it's understood by the docker CLI
          mkdir -p ~/.docker/cli-plugins
          ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
        elif [[ "${{ matrix.config.os }}" == "ubuntu-latest" ]]; then
          echo "Setting up Docker for Ubuntu..."
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
    

    - name: Docker Versions
      run: |
        while ! docker system info > /dev/null 2>&1; do
          echo "Waiting for Docker daemon..."
          sleep 2
        done
        docker --version
        docker-compose --version

    - name: Compose Build
      run: docker-compose build --no-cache 2>&1 | tee compose-build.log
    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      with:
        name: compose-build-log-${{ matrix.config.os }}
        path: compose-build.log

    - name: Compose Up
      run: docker-compose up -d 2>&1 | tee compose-up.log
    - name: Upload Compose Up Logs
      uses: actions/upload-artifact@v3
      with:
        name: compose-up-${{ matrix.config.os }}.log
        path: compose-up.log

    - name: Compose Logs Test
      run: |
        timeout=300  # 5 minute timeout
        start=$SECONDS
        while true; do
          docker-compose logs > compose-run.log 2>&1
          if grep -q "Configuration complete; ready for start up" compose-run.log; then
            echo "Found success pattern in logs"
            exit 0
          fi
          if grep -q "error\|Error\|ERROR" compose-run.log; then
            echo "Found error in logs"
            exit 1
          fi
          elapsed=$(( SECONDS - start ))
          if (( elapsed > timeout )); then
            echo "Timed out waiting for success pattern"
            exit 1
          fi
          sleep 5
        done
    - name: Upload Compose Run Logs
      uses: actions/upload-artifact@v3
      with:
        name: compose-run-${{ matrix.config.os }}.log
        path: compose-run.log

    - name: Health Check Test
      run: |
        docker-compose ps
        health_response=$(curl -s http://localhost:8080/health)
        echo "Health Check Response: $health_response"
        echo "$health_response" | jq '.status' | grep -q '"up"' || exit 1

    - name: Compose Down
      run: docker-compose down 2>&1 | tee compose-down.log
    - name: Upload Compose Down Logs
      uses: actions/upload-artifact@v3
      with:
        name: compose-down-${{ matrix.config.os }}.log
        path: compose-down.log