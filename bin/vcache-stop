#!/usr/bin/env bash

usage() {
    echo "Usage: $0 [-c|--clean] [-r|--real-clean] [-A|--no-ansi] [-h|--help]"
    echo "Options:"
    echo "  -c, --clean       stop, down, and remove volumes "
    echo "  -r, --real-clean  stop, down, remove volumes, remove images "
    echo "  -A, --no-ansi     do not output ansi control characters"
    echo "  -h, --help        show this help message"
}

options=$(getopt -l "help,clean,real-clean,no-ansi" -o "hcrA" -n "$0" -- "$@")

if [ $? -ne 0 ]; then
    usage
    exit 1
fi

eval set -- "$options"
while true
do
    case "$1" in
        -c|--clean )
            clean=true
            ;;
        -r|--real-clean )
            real_clean=true
            ;;
        -A|--no-ansi )
            no_ansi=true
            ;;
        -h|--help )
            usage
            exit 0
            ;;
        -- )
            shift
            break
            ;;
        * )
            usage
            exit 1
            ;;
    esac
done

SOURCE_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && cd .. && pwd )

cd $SOURCE_DIR

if [[ $? != 0 ]]; then
	echo "[$?] unable to cd to source directory..."
	exit 1
fi

if [ "$EUID" -eq 0 ]; then
    SUDO=
else
    SUDO="sudo -E"
fi

$SUDO docker-compose ps --services --filter "status=running" 2>/dev/null | grep "vcache_mgr_agent" > /dev/null

if [ $? != 0 ]; then
	echo "vcache containers are not running..."
fi

if [[ $no_ansi ]]; then
    DC_ARGS="--ansi never"
else
    DC_ARGS=""
fi

if [[ $real_clean ]]; then
	echo "deep cleaning volumes and images from the vcache deployment..."
	$SUDO docker-compose ${DC_ARGS} down --volumes --rmi local --remove-orphans --timeout 45
	if [ $? != 0 ]; then
		echo "[$?] an error or timeout ocurred deep cleaning the vcache deployment"
		exit 3
	fi
elif [[ $clean ]]; then
	echo "cleaning volumes and orphan images from the vcache deployment..."
	$SUDO docker-compose ${DC_ARGS} down --volumes --remove-orphans --timeout 45
	if [ $? != 0 ]; then
		echo "[$?] an error or timeout ocurred cleaning the vcache deployment"
		exit 3
	fi
else
	echo "stopping vcache containers..."
	$SUDO docker-compose ${DC_ARGS} down
	if [[ $? != 0 ]]; then
		echo "[$?] an error occured stopping vcache, exiting..."
		exit 2
	fi
	echo "vcache stopped..."
fi	 

exit 0
